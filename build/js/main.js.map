{"version":3,"sources":["main.js"],"names":["neighborhoods","restaurants","cuisines","fetchNeighborhoods","DBHelper","error","self","console","fillNeighborhoodsHTML","arguments","length","undefined","select","document","getElementById","forEach","neighborhood","createElement","option","value","fetchCuisines","fillCuisinesHTML","cuisine","innerHTML","event","updateRestaurants","map","google","maps","Map","zoom","center","lng","window","scrollwheel","cSelect","nSelect","cIndex","selectedIndex","nIndex","resetRestaurants","markers","m","setMap","fillRestaurantsHTML","restaurant","ul","append","createRestaurantHTML","sourcewebp","srcset","id","setAttribute","picture","appendChild","sourcexsmall","imageUrlForRestaurant","li","sourcesmall","sourcemedium","sourcelarge","sourcedesk","picimage","name","className","alt","more","href","urlForRestaurant","moreTitle","addListener","marker","url","push"],"mappings":"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","file":"main.js","sourcesContent":["let restaurants,\r\n  neighborhoods,\r\n  cuisines\r\nvar map\r\nvar markers = []\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nconst fetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nconst fetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n  updateRestaurants();\r\n});\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  //updateRestaurants();\r\n}\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nconst updateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nconst resetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  self.markers.forEach(m => m.setMap(null));\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n  //addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nconst createRestaurantHTML = (restaurant) => {\r\n  const li = document.createElement('li');\r\n\r\n  const picture = document.createElement('picture');\r\n  li.appendChild(picture);\r\n\r\n  const sourcewebp = document.createElement('source');\r\n  sourcewebp.srcset = `/source/img/${restaurant.id}.webp`;\r\n  sourcewebp.setAttribute('type', 'image/webp');\r\n  picture.appendChild(sourcewebp);\r\n\r\n  const sourcexsmall = document.createElement('source');\r\n  sourcexsmall.setAttribute('media', '(min-width: 360px)');\r\n  sourcexsmall.srcset = DBHelper.imageUrlForRestaurant(restaurant, 'xsmall');\r\n  sourcexsmall.setAttribute('type', 'image/jpeg');\r\n  picture.appendChild(sourcexsmall);\r\n\r\n  const sourcesmall = document.createElement('source');\r\n  sourcesmall.setAttribute('media', '(min-width: 520px)');\r\n  sourcesmall.srcset = DBHelper.imageUrlForRestaurant(restaurant, 'small');\r\n  sourcesmall.setAttribute('type', 'image/jpeg');\r\n  picture.appendChild(sourcesmall);\r\n\r\n  const sourcemedium = document.createElement('source');\r\n  sourcemedium.setAttribute('media', '(min-width: 800px)');\r\n  sourcemedium.srcset = DBHelper.imageUrlForRestaurant(restaurant, 'medium');\r\n  sourcemedium.setAttribute('type', 'image/jpeg');\r\n  picture.appendChild(sourcemedium);\r\n\r\n  const sourcelarge = document.createElement('source');\r\n  sourcelarge.setAttribute('media', '(min-width: 1000px)');\r\n  sourcelarge.srcset = DBHelper.imageUrlForRestaurant(restaurant, 'large');\r\n  sourcelarge.setAttribute('type', 'image/jpeg');\r\n  picture.appendChild(sourcelarge);\r\n\r\n  const sourcedesk = document.createElement('source');\r\n  sourcedesk.setAttribute('media', '(min-width: 1500px)');\r\n  sourcedesk.srcset = `/build/img/${restaurant.id}-original.jpg`;\r\n  sourcedesk.setAttribute('type', 'image/jpeg');\r\n  picture.appendChild(sourcedesk);\r\n\r\n  const picimage = document.createElement('img');\r\n  picimage.className = 'restaurant-img';\r\n  picimage.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  picimage.alt = `Image of ${restaurant.name} restaurant.`;\r\n  picture.appendChild(picimage);\r\n\r\n  const name = document.createElement('h3');\r\n  name.innerHTML = restaurant.name;\r\n  li.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  li.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  const moreTitle = `Read ${restaurant.name}'s restaurant details.`;\r\n  more.innerHTML = 'View Details';\r\n  more.tabIndex = '0';\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  more.setAttribute('aria-label', moreTitle);\r\n  li.append(more)\r\n\r\n  return li\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nconst addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n}\r\n"]}