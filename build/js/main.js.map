{"version":3,"sources":["main.js"],"names":["cuisines","restaurants","neighborhoods","observer","fetchNeighborhoods","DBHelper","error","self","console","fillNeighborhoodsHTML","arguments","length","undefined","select","document","getElementById","forEach","neighborhood","createElement","option","value","fetchCuisines","fillCuisinesHTML","cuisine","innerHTML","event","updateRestaurants","map","google","maps","Map","zoom","center","lng","window","scrollwheel","cSelect","nSelect","cIndex","selectedIndex","nIndex","resetRestaurants","markers","m","setMap","fillRestaurantsHTML","restaurant","ul","append","createRestaurantHTML","entries","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","entry","target","childNodes","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","setAttribute","getAttribute","tagName","err","_iterator2","return","unobserve","li","picture","appendChild","isIntersecting","targets","sourcewebp","id","sourcexsmall","sourcesmall","imageUrlForRestaurant","sourcemedium","sourcelarge","sourcedesk","picimage","className","alt","name","address","observe","moreTitle","more","addListener","marker"],"mappings":"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","file":"main.js","sourcesContent":["let restaurants,\r\n  neighborhoods,\r\n  cuisines,\r\n  observer;\r\nvar map;\r\nvar markers = [];\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nconst fetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nconst fetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n  updateRestaurants();\r\n});\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  //updateRestaurants();\r\n}\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nconst updateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nconst resetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  self.markers.forEach(m => m.setMap(null));\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n  //addMarkersToMap();\r\n}\r\n\r\n\r\n/**\r\n * Add image lazyloading using IntersectionObserver\r\n */\r\nobserver = new IntersectionObserver(entries => {\r\n  for (const entry of entries) {\r\n    if (!entry.isIntersecting) return;\r\n    var targets = entry.target.childNodes;\r\n    for (const target of targets) {\r\n      target.setAttribute('srcset',target.getAttribute('data-srcset'));\r\n      if (target.tagName === 'IMG') {\r\n        target.setAttribute('src',target.getAttribute('data-srcset'));\r\n      }\r\n    }\r\n    observer.unobserve(entry.target);\r\n  }\r\n});\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nconst createRestaurantHTML = (restaurant) => {\r\n  const li = document.createElement('li');\r\n\r\n  const picture = document.createElement('picture');\r\n  li.appendChild(picture);\r\n  observer.observe(picture);\r\n\r\n  const sourcewebp = document.createElement('source');\r\n  sourcewebp.setAttribute('data-srcset',`/source/img/${restaurant.id}.webp`);\r\n  sourcewebp.setAttribute('type', 'image/webp');\r\n  picture.appendChild(sourcewebp);\r\n\r\n  const sourcexsmall = document.createElement('source');\r\n  sourcexsmall.setAttribute('media', '(min-width: 360px)');\r\n  sourcexsmall.setAttribute('data-srcset',DBHelper.imageUrlForRestaurant(restaurant, 'xsmall'));\r\n  sourcexsmall.setAttribute('type', 'image/jpeg');\r\n  picture.appendChild(sourcexsmall);\r\n\r\n  const sourcesmall = document.createElement('source');\r\n  sourcesmall.setAttribute('media', '(min-width: 520px)');\r\n  sourcesmall.setAttribute('data-srcset',DBHelper.imageUrlForRestaurant(restaurant, 'small'));\r\n  sourcesmall.setAttribute('type', 'image/jpeg');\r\n  picture.appendChild(sourcesmall);\r\n\r\n  const sourcemedium = document.createElement('source');\r\n  sourcemedium.setAttribute('media', '(min-width: 800px)');\r\n  sourcemedium.setAttribute('data-srcset',DBHelper.imageUrlForRestaurant(restaurant, 'medium'));\r\n  sourcemedium.setAttribute('type', 'image/jpeg');\r\n  picture.appendChild(sourcemedium);\r\n\r\n  const sourcelarge = document.createElement('source');\r\n  sourcelarge.setAttribute('media', '(min-width: 1000px)');\r\n  sourcelarge.setAttribute('data-srcset',DBHelper.imageUrlForRestaurant(restaurant, 'large'));\r\n  sourcelarge.setAttribute('type', 'image/jpeg');\r\n  picture.appendChild(sourcelarge);\r\n\r\n  const sourcedesk = document.createElement('source');\r\n  sourcedesk.setAttribute('media', '(min-width: 1500px)');\r\n  sourcedesk.setAttribute('data-srcset',`/build/img/${restaurant.id}-original.jpg`);\r\n  sourcedesk.setAttribute('type', 'image/jpeg');\r\n  picture.appendChild(sourcedesk);\r\n\r\n  const picimage = document.createElement('img');\r\n  picimage.className = 'restaurant-img';\r\n  picimage.setAttribute('data-srcset',`/build/img/${restaurant.id}-original.jpg`);\r\n  picimage.alt = `Image of ${restaurant.name} restaurant.`;\r\n  picture.appendChild(picimage);\r\n\r\n  const name = document.createElement('h3');\r\n  name.innerHTML = restaurant.name;\r\n  li.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  li.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  const moreTitle = `Read ${restaurant.name}'s restaurant details.`;\r\n  more.innerHTML = 'View Details';\r\n  more.tabIndex = '0';\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  more.setAttribute('aria-label', moreTitle);\r\n  li.append(more)\r\n\r\n  return li\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nconst addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n}\r\n"]}