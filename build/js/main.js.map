{"version":3,"sources":["main.js"],"names":["cuisines","restaurants","neighborhoods","observer","fetchNeighborhoods","DBHelper","error","self","console","fillNeighborhoodsHTML","arguments","length","undefined","select","document","getElementById","forEach","neighborhood","createElement","option","value","fetchCuisines","fillCuisinesHTML","cuisine","innerHTML","event","updateRestaurants","pressed","labelText","toogleMapButton","getAttribute","mapToggle","theMap","buttonState","google","maps","Map","style","lat","scrollwheel","lng","height","center","setAttribute","cSelect","addMarkersToMap","cIndex","selectedIndex","nIndex","nSelect","resetRestaurants","markers","m","setMap","fillRestaurantsHTML","restaurant","ul","append","createRestaurantHTML","_step","_iterator","entries","Symbol","iterator","_iteratorNormalCompletion","next","done","entry","isIntersecting","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","targets","_step2","target","tagName","err","_iterator2","return","unobserve","li","picture","appendChild","sourcewebp","id","sourcexsmall","sourcesmall","imageUrlForRestaurant","sourcemedium","sourcelarge","sourcedesk","picimage","className","alt","name","address","observe","moreTitle","more","map","addListener","marker"],"mappings":"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","file":"main.js","sourcesContent":["let restaurants,\r\n  neighborhoods,\r\n  cuisines,\r\n  observer;\r\nvar map;\r\nvar markers = [];\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nconst fetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nconst fetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n  updateRestaurants();\r\n});\r\n\r\n/**\r\n * Initialize Google map, on user input.\r\n */\r\nconst mapToggle = () => {\r\n  let theMap = document.getElementById('map');\r\n  let toogleMapButton = document.getElementById('togglemap');\r\n  let buttonState = toogleMapButton.getAttribute('aria-pressed');\r\n  let pressed = 'false';\r\n  let labelText = 'Display map';\r\n  \r\n  if (buttonState === 'true') {\r\n    pressed = 'false';\r\n    labelText = 'Display map';\r\n    theMap.style.height = '0';\r\n    theMap.innerHTML = \"\";\r\n  } else {\r\n    let loc = {\r\n      lat: 40.722216,\r\n      lng: -73.987501\r\n    };\r\n    self.map = new google.maps.Map(document.getElementById('map'), {\r\n      zoom: 12,\r\n      center: loc,\r\n      scrollwheel: false\r\n    });\r\n    pressed = 'true';\r\n    labelText = 'Hide map';\r\n    theMap.style.height = '400px';\r\n  }\r\n\r\n  toogleMapButton.setAttribute('aria-pressed', pressed);\r\n  toogleMapButton.setAttribute('aria-label', labelText);\r\n  toogleMapButton.innerHTML = labelText;\r\n\r\n  addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nconst updateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nconst resetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  self.markers.forEach(m => m.setMap(null));\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n}\r\n\r\n\r\n/**\r\n * Add image lazyloading using IntersectionObserver\r\n */\r\nobserver = new IntersectionObserver(entries => {\r\n  for (const entry of entries) {\r\n    if (!entry.isIntersecting) return;\r\n    var targets = entry.target.childNodes;\r\n    for (const target of targets) {\r\n      target.setAttribute('srcset',target.getAttribute('data-srcset'));\r\n      if (target.tagName === 'IMG') {\r\n        target.setAttribute('src',target.getAttribute('data-srcset'));\r\n      }\r\n    }\r\n    observer.unobserve(entry.target);\r\n  }\r\n});\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nconst createRestaurantHTML = (restaurant) => {\r\n  const li = document.createElement('li');\r\n\r\n  const picture = document.createElement('picture');\r\n  li.appendChild(picture);\r\n  observer.observe(picture);\r\n\r\n  const sourcewebp = document.createElement('source');\r\n  sourcewebp.setAttribute('data-srcset',`/source/img/${restaurant.id}.webp`);\r\n  sourcewebp.setAttribute('type', 'image/webp');\r\n  picture.appendChild(sourcewebp);\r\n\r\n  const sourcexsmall = document.createElement('source');\r\n  sourcexsmall.setAttribute('media', '(min-width: 360px)');\r\n  sourcexsmall.setAttribute('data-srcset',DBHelper.imageUrlForRestaurant(restaurant, 'xsmall'));\r\n  sourcexsmall.setAttribute('type', 'image/jpeg');\r\n  picture.appendChild(sourcexsmall);\r\n\r\n  const sourcesmall = document.createElement('source');\r\n  sourcesmall.setAttribute('media', '(min-width: 520px)');\r\n  sourcesmall.setAttribute('data-srcset',DBHelper.imageUrlForRestaurant(restaurant, 'small'));\r\n  sourcesmall.setAttribute('type', 'image/jpeg');\r\n  picture.appendChild(sourcesmall);\r\n\r\n  const sourcemedium = document.createElement('source');\r\n  sourcemedium.setAttribute('media', '(min-width: 800px)');\r\n  sourcemedium.setAttribute('data-srcset',DBHelper.imageUrlForRestaurant(restaurant, 'medium'));\r\n  sourcemedium.setAttribute('type', 'image/jpeg');\r\n  picture.appendChild(sourcemedium);\r\n\r\n  const sourcelarge = document.createElement('source');\r\n  sourcelarge.setAttribute('media', '(min-width: 1000px)');\r\n  sourcelarge.setAttribute('data-srcset',DBHelper.imageUrlForRestaurant(restaurant, 'large'));\r\n  sourcelarge.setAttribute('type', 'image/jpeg');\r\n  picture.appendChild(sourcelarge);\r\n\r\n  const sourcedesk = document.createElement('source');\r\n  sourcedesk.setAttribute('media', '(min-width: 1500px)');\r\n  sourcedesk.setAttribute('data-srcset',`/build/img/${restaurant.id}-original.jpg`);\r\n  sourcedesk.setAttribute('type', 'image/jpeg');\r\n  picture.appendChild(sourcedesk);\r\n\r\n  const picimage = document.createElement('img');\r\n  picimage.className = 'restaurant-img';\r\n  picimage.setAttribute('data-srcset',`/build/img/${restaurant.id}-original.jpg`);\r\n  picimage.alt = `Image of ${restaurant.name} restaurant.`;\r\n  picture.appendChild(picimage);\r\n\r\n  const name = document.createElement('h3');\r\n  name.innerHTML = restaurant.name;\r\n  li.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  li.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  const moreTitle = `Read ${restaurant.name}'s restaurant details.`;\r\n  more.innerHTML = 'View Details';\r\n  more.tabIndex = '0';\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  more.setAttribute('aria-label', moreTitle);\r\n  li.append(more)\r\n\r\n  return li\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nconst addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n}\r\n"]}