{"version":3,"sources":["dbhelper.js"],"names":["DBHelper","response","status","Promise","resolve","reject","statusText","json","open","upgradeDb","createObjectStore","keyPath","createIndex","store","console","log","db","transaction","objectStore","getAll","fetch","DATABASE_URL","then","restaurants","restaurantsFromDB","data","openDB","restaurantsFromAPI","saveRestaurants","forEach","restaurant","tx","complete","callback","getRestaurantsFromAPI","catch","error","id","getRestaurantsFromDB","r","cuisine","fetchRestaurants","results","filter","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","imgWidth","arguments","length","undefined","imageUrlForRestaurant","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","DROP"],"mappings":"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","file":"dbhelper.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337 // Change this to your server port\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  /**\r\n   * Check status of Fetch requests.\r\n   */\r\n  static checkStatus(response) {\r\n    if (response.status === 200) {\r\n      return Promise.resolve(response)\r\n    } else {\r\n      return Promise.reject(new Error(`Request has failed. Return status: ${response.statusText}`))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert response to JSON data\r\n   */\r\n  static json(response) {\r\n    return response.json()\r\n  }\r\n\r\n  /**\r\n   * Opens the IndexedDB\r\n   */\r\n  static openDB() {\r\n    const dbPromise = idb.open('restaurantsDB', 1, upgradeDb => {\r\n      const store = upgradeDb.createObjectStore('restaurants', {keyPath: 'id'});\r\n      store.createIndex('by-id', 'id');\r\n    });\r\n    return dbPromise;\r\n  }\r\n\r\n  /**\r\n   * Get the Restaurants from the IDB\r\n   */\r\n  static getRestaurantsFromDB() {\r\n    const restaurantsFromDB = DBHelper.openDB()\r\n    .then( db => {\r\n      console.log('Getting Restaurants From DB');\r\n      if(!db) return;\r\n      let store = db.transaction('restaurants').objectStore('restaurants');\r\n      return store.getAll();\r\n    });\r\n    return restaurantsFromDB;\r\n  }\r\n\r\n  /**\r\n   * Get the Restaurants from the Server API\r\n   */\r\n  static getRestaurantsFromAPI(){\r\n    console.log('Getting Restaurants From API');\r\n    const restaurantsFromAPI = fetch(DBHelper.DATABASE_URL)\r\n    .then(DBHelper.checkStatus)\r\n    .then(DBHelper.json)\r\n    .then(restaurants => {\r\n      DBHelper.saveRestaurants(restaurants);\r\n      return restaurants;\r\n    });\r\n    return restaurantsFromAPI;\r\n  }\r\n\r\n  /**\r\n   * Save restaurant data to IDB\r\n   */\r\n  static saveRestaurants(data){\r\n    return DBHelper.openDB().then(db => {\r\n      if(!db) return;\r\n      const tx = db.transaction('restaurants', 'readwrite');\r\n      const store = tx.objectStore('restaurants');\r\n      data.forEach((restaurant) => {\r\n        store.put(restaurant);\r\n      });\r\n      return tx.complete;\r\n    }).then(() => {\r\n      console.log('Restaurants Saved')\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    return DBHelper.getRestaurantsFromDB().then(restaurants => {\r\n      if(restaurants.length) {\r\n        return Promise.resolve(restaurants);\r\n      } else {\r\n        return DBHelper.getRestaurantsFromAPI();\r\n      }\r\n    }).then(restaurants => {\r\n      callback(null, restaurants);\r\n    }).catch(error => {\r\n      callback(error, null);\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant, imgWidth = null) {\r\n    if (imgWidth !== null) {\r\n      return `/build/img/${restaurant.id}-${imgWidth}.jpg`;\r\n    }\r\n    return `/build/img/${restaurant.id}-original.jpg`;\r\n\r\n    //return (`/img/${restaurant.photograph}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image SRCSET.\r\n   */\r\n  static imageSrcSetForRestaurant(restaurant) {\r\n    const widthXsmall   = DBHelper.imageUrlForRestaurant(restaurant, 'xsmall');\r\n    const widthSmall    = DBHelper.imageUrlForRestaurant(restaurant, 'small');\r\n    const widthMedium   = DBHelper.imageUrlForRestaurant(restaurant, 'medium');\r\n    const widthLarge    = DBHelper.imageUrlForRestaurant(restaurant, 'large');\r\n    const widthOriginal = DBHelper.imageUrlForRestaurant(restaurant);\r\n    const imageSrcSet = `${widthXsmall} 360w, ${widthSmall} 520w, ${widthMedium} 800w, ${widthLarge} 1000w, ${widthOriginal} 1500w`;\r\n    return imageSrcSet;\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  }\r\n\r\n}\r\n"]}