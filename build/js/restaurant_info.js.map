{"version":3,"sources":["restaurant_info.js"],"names":["map","restaurant","window","initMap","self","google","maps","Map","document","getElementById","zoom","scrollwheel","fetchRestaurantFromURL","Promise","resolve","reject","id","getParameterByName","DBHelper","fetchRestaurantById","error","then","reviews","fillRestaurantHTML","fillReviewsHTML","fetchReviewByRestaurant","arguments","length","undefined","name","picture","address","sourcewebp","createElement","className","appendChild","setAttribute","imageUrlForRestaurant","sourcexsmall","sourcesmall","sourcemedium","sourcelarge","sourcedesk","picimage","alt","cuisine","fillRestaurantHoursHTML","operatingHours","operating_hours","hours","key","row","day","innerHTML","time","container","title","noReviews","forEach","review","ul","createReviewHTML","li","date","Date","updatedAt","toLocaleDateString","rating","comments","breadcrumb","url","replace","results","exec","submitReview","decodeURIComponent","formEl","formElID","value","parseInt","i","fieldName","console","log","fillBreadcrumb","ev","form","addEventListener","catch","err"],"mappings":"aAAA,IACIA,IADAC,gBAAAA,EAMJC,OAAOC,QAAU,WACfC,KAAKJ,IAAM,IAAIK,OAAOC,KAAKC,IAAIC,SAASC,eAAe,OAAQ,CADjEP,KAAOC,GACLC,OAAAH,WAAeI,OACbK,aAD6D,IAG7DC,SAAAA,uBAAaP,KAAAH,WAAAG,KAAAJ,MAQjB,IAAMY,uBAAyB,WAC7B,OAAO,IAAIC,QAAQ,SAACC,EAASC,GADzBH,GAAAA,KAAAA,WACJ,OAAWC,EAAQT,KAAAH,YACM,IAAAe,EAAAC,mBAAA,MACrB,IAAAD,EAAOF,CAET,OAAWG,EADV,2BAEUC,SAAAC,oBAAAH,EAAA,SAAAI,EAAAnB,GAET,KADAG,KAAMgB,WAAQnB,GADhB,OAGOc,EAAAK,GAEHhB,qBACAc,SAAKjB,wBAAYA,EAAAe,IACfK,KAAA,SAAAC,GAEFC,OADCC,gBAAAF,GACDC,EAAAA,KAAAA,cACAL,MAASO,SAAAA,GAEPD,OAAAA,EAAAA,UAeJD,mBAAqB,WAAkC,IAAjCtB,EAAiC,EAAAyB,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAApBtB,KAAKH,WAC/BO,SAASC,eAAe,mBADjCc,UAAAA,EAAqBM,KAITrB,SAASC,eAAe,sBAHlCoB,UAAgBpB,EAAAA,QAMtB,IAAMqB,EAAUtB,SAASC,eAAe,kBAHxCqB,EAAMC,UAAUvB,iBAMhB,IAAMwB,EAAaxB,SAASyB,cAAc,UAH1CD,EAAMF,OAAN,eAAyBrB,EAAeO,GAAxC,QACAc,EAAQI,aAAY,OAAA,cAKpBJ,EAAQK,YAAYH,GAFpBA,IAAAA,EAAAxB,SAAAyB,cAAmChC,UACnC+B,EAAWI,aAAa,QAAQ,sBAChCN,EAAQK,OAAYH,SAApBK,sBAAApC,EAAA,UAKAqC,EAAaF,aAAa,OAAQ,cAHlCN,EAAMQ,YAAe9B,GAErB8B,IAAAA,EAAA9B,SAAsBU,cAASmB,UAC/BC,EAAAA,aAAA,QAAkC,sBAClCR,EAAQK,OAAYG,SAAAA,sBAApBrC,EAAA,SAKAsC,EAAYH,aAAa,OAAQ,cAHjCN,EAAMS,YAAc/B,GAEpB+B,IAAAA,EAAqBrB,SAASmB,cAAAA,UAC9BE,EAAYH,aAAa,QAAQ,sBACjCN,EAAQK,OAAYI,SAApBF,sBAAApC,EAAA,UAKAuC,EAAaJ,aAAa,OAAQ,cAHlCN,EAAMU,YAAehC,GAErBgC,IAAAA,EAAAhC,SAAsBU,cAASmB,UAC/BG,EAAAA,aAAA,QAAkC,uBAClCV,EAAQK,OAAYK,SAAAA,sBAApBvC,EAAA,SAKAwC,EAAYL,aAAa,OAAQ,cAHjCN,EAAMW,YAAcjC,GAEpBiC,IAAAA,EAAAjC,SAAqBU,cAASmB,UAC9BI,EAAAA,aAAA,QAAiC,uBACjCX,EAAQK,OAARL,cAAA7B,EAAAe,GAAAc,gBAKAY,EAAWN,aAAa,OAAQ,cAHhCN,EAAMY,YAAalC,GAEnBkC,IAAAA,EAAAlC,SAAAyB,cAAkChC,OAClCyC,EAAAA,UAAWN,iBACXN,EAAQK,IAAAA,SAAYO,sBAApBzC,GAKA0C,EAASC,IAAT,YAA2B3C,EAAW4B,KAAtC,eAHAC,EAAMa,YAAWnC,GAEFU,SAASmB,eAAAA,sBACxBM,UAAA1C,EAA2BA,aAGrB4C,EAAUrC,iBAChBqC,2BAWIC,wBAA0B,WAAsD,IAArDC,EAAqD,EAAArB,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAApCtB,KAAKH,WAAW+C,gBAHlEC,EAAAzC,SAAAC,eAAA,oBAKE,IAAK,IAAIyC,KAAOH,EAAgB,CAC9B,IAAMI,EAAM3C,SAASyB,cAAc,MAHNc,EAAAA,SAAqDd,cAAA,MAMlFmB,EAAIC,UAAYH,EALlBC,EAAMF,YAAQzC,GAEZ,IAAM2C,EAAM3C,SAASyB,cAAc,MAOnCqB,EAAKD,UAAYN,EAAeG,GALhCC,EAAMC,YAAM5C,GAEZ2C,EAAIhB,YAAYiB,KAOjB5B,gBAAA,WAAA,IAAAF,EAAA,EAAAI,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAAtB,KAAAH,WAAAqB,QAdHiC,EAAA/C,SAAAC,eAAA,qBAsBQ+C,EAAQhD,SAASyB,cAAc,MAFvC,GAHAuB,EAAAH,UAAA,UAOEE,EAAUpB,YAAYqB,IAJlBhC,EAAAA,CAAyD,IAAtCF,EAAsCd,SAAAyB,cAAA,KAE7D,OAMEwB,EAAUJ,UAAY,uBAPxBE,EAAMA,YAAY/C,GAGlB+C,IAAAA,EAAUpB,SAAAA,eAAV,gBASAb,EAAQoC,QAAQ,SAAAC,GAPhBC,EAAKtC,YAASuC,iBAAAF,MAEZF,EAAAA,YAAAG,IAMAA,iBAAeC,WAChB,IAFDN,EAAA/C,SAAAC,eAAA,qBAGA8C,EAAUpB,UAAYyB,GAhBxB,IAAAA,EAAApD,SAAAyB,cAAA,MA0BE2B,EAAG5C,GAAK,eAPVuC,EAAApB,YAAAyB,IAMQA,iBAAc3B,SAAAA,GACpB2B,IAAAE,EAAQtD,SAAAyB,cAAR,MACAsB,EAAUpB,SAAYyB,cAAtB,KALF/B,EAAAwB,UAAAM,EAAA9B,KAeEiC,EAAG3B,YAAYN,GAEf,IAAMkC,EAAOvD,SAASyB,cAAc,KACpC8B,EAAKV,UAAY,IAAIW,KAAKL,EAAOM,WAAWC,qBAP9CJ,EAAMD,YAAAA,GAEJ,IAAMhC,EAAOrB,SAASyB,cAAtB,KACAJ,EAAKwB,UAALxB,WAAA8B,EAAAQ,OACAL,EAAG3B,YAAYN,GAEf,IAAMkC,EAAOvD,SAASyB,cAAtB,KAIA,OAHA8B,EAAKV,UAAgBW,EAAKL,SAC1BG,EAAG3B,YAAY4B,GAETI,GAMHhC,eAAYiC,WAAf,IAAeA,EAAf,EAAA1C,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAAtB,KAAAH,WASMoE,EAAa7D,SAASC,eAAe,cAP3CqD,EAAAtD,SAAAyB,cAAA,MAlBF6B,EAAAT,UAAApD,EAAA4B,KA4BEwC,EAAWlC,YAAY2B,IAMnB7C,mBAAqB,SAACY,EAAMyC,GAT1BD,IACNC,EAAMR,OAAKtD,SAASyB,MACpB6B,EAAGT,EAAHkB,QAAetE,UAAf,QACAoE,IAJFG,EAIarC,IAAAA,OAAAA,OAAXN,EAAWM,qBAJbsC,KAAAH,GAgBE,OAAKE,EAEAA,EAAQ,GARTvD,mBAAqBuD,EAArBvD,GAAAA,QAAAA,MAAsBY,MASjB,GAZX,MAWM6C,aACF,WACF,IAAAf,EAAOgB,GAVTC,EAAApE,SAAAC,eAAA,oBAmBMoE,EAAWrE,SAASC,eAAe,iBANzCoE,EAAAC,MAAAC,SAAA9D,mBAAA,OAQE2D,EAAOzC,YAAY0C,GACnB,IAAK,IAAIG,EAAI,EAAGA,EAAIJ,EAAOjD,SAAUqD,EAAG,CANpCN,IAAAA,EAAeE,EAAAI,GAAfN,KACAf,EAASiB,EAAbI,GAAAF,MACatE,KAAToE,GAAS,KAASnE,IACPD,kBAAXqE,GAAmC,WAAAI,IACvCJ,EAASC,SAAQC,IAEjBpB,EAASqB,EAAOA,GAAAA,MAAWrD,GAEzBiD,EAAIE,QACJ5D,SAAI+D,WAActB,IAgBpBuB,QAAQC,IAAI,sBAJdvE,yBAMGS,KAAK,SAACpB,GACLmF,iBAJE5E,SAAAC,eAAA,oBACJyE,iBAAY,SAAZ,SAAAG,GACAzE,EAAAA,iBAEEwE,iBAEAE,SAAKC,iBAAiB,sBAAuB,SAAAF,GAC3CA,mBACAX,SAAAA,wBAAAA,EAAAA,IAFFrD,KAAA,SAAAC,GAIAd,gBAAS+E,SAMNC,MAJD,SAAAC,GAKDP,QAPD9D,MAAA,eAAAqE","file":"restaurant_info.js","sourcesContent":["let restaurant;\nvar map;\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n  self.map = new google.maps.Map(document.getElementById('map'), {\n    zoom: 16,\n    center: restaurant.latlng,\n    scrollwheel: false\n  });\n  DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n}\n\n/**\n * Get current restaurant from page URL.\n */\nconst fetchRestaurantFromURL = () => {\n  return new Promise((resolve, reject) => {\n    if (self.restaurant) { // restaurant already fetched!\n      return resolve(self.restaurant)\n    }\n    const id = getParameterByName('id');\n    if (!id) { // no id found in URL\n      const error = 'No restaurant id in URL'\n      return reject(error);\n    } else {\n      DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n        self.restaurant = restaurant;\n        if (!restaurant) {\n          return reject(error);\n        }\n        fillRestaurantHTML();\n        DBHelper.fetchReviewByRestaurant(restaurant.id)\n        .then((reviews) => {\n          fillReviewsHTML(reviews);\n          return resolve(self.restaurant);\n        }).catch(err => {\n          return reject(err);\n        })\n        //return resolve(self.restaurant);\n      });\n    }\n  });\n}\n\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  const picture = document.getElementById('restaurant-img');\n  picture.className = 'restaurant-img';\n  \n  const sourcewebp = document.createElement('source');\n  sourcewebp.srcset = `/source/img/${restaurant.id}.webp`;\n  sourcewebp.setAttribute('type', 'image/webp');\n  picture.appendChild(sourcewebp);\n\n  const sourcexsmall = document.createElement('source');\n  sourcexsmall.setAttribute('media', '(min-width: 360px)');\n  sourcexsmall.srcset = DBHelper.imageUrlForRestaurant(restaurant, 'xsmall');\n  sourcexsmall.setAttribute('type', 'image/jpeg');\n  picture.appendChild(sourcexsmall);\n\n  const sourcesmall = document.createElement('source');\n  sourcesmall.setAttribute('media', '(min-width: 520px)');\n  sourcesmall.srcset = DBHelper.imageUrlForRestaurant(restaurant, 'small');\n  sourcesmall.setAttribute('type', 'image/jpeg');\n  picture.appendChild(sourcesmall);\n\n  const sourcemedium = document.createElement('source');\n  sourcemedium.setAttribute('media', '(min-width: 800px)');\n  sourcemedium.srcset = DBHelper.imageUrlForRestaurant(restaurant, 'medium');\n  sourcemedium.setAttribute('type', 'image/jpeg');\n  picture.appendChild(sourcemedium);\n\n  const sourcelarge = document.createElement('source');\n  sourcelarge.setAttribute('media', '(min-width: 1000px)');\n  sourcelarge.srcset = DBHelper.imageUrlForRestaurant(restaurant, 'large');\n  sourcelarge.setAttribute('type', 'image/jpeg');\n  picture.appendChild(sourcelarge);\n\n  const sourcedesk = document.createElement('source');\n  sourcedesk.setAttribute('media', '(min-width: 1500px)');\n  sourcedesk.srcset = `/build/img/${restaurant.id}-original.jpg`;\n  sourcedesk.setAttribute('type', 'image/jpeg');\n  picture.appendChild(sourcedesk);\n\n  const picimage = document.createElement('img');\n  picimage.className = 'restaurant-img';\n  picimage.src = DBHelper.imageUrlForRestaurant(restaurant);\n  picimage.alt = `Image of ${restaurant.name} restaurant.`;\n  picture.appendChild(picimage);\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n}\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h3');\n  title.innerHTML = 'Reviews';\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n}\n\n/**\n * Remove all reviews HTML.\n */\nconst resetReviewsHTML = () => {\n  const container = document.getElementById('reviews-container');\n  container.innerHTML = \"\";\n  const ul = document.createElement('ul');\n  ul.id = 'reviews-list';\n  container.appendChild(ul);\n}\n\n/**\n * Create review HTML and add it to the webpage.\n */\nconst createReviewHTML = (review) => {\n  const li = document.createElement('li');\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n  li.appendChild(name);\n\n  const date = document.createElement('p');\n  date.innerHTML = new Date(review.updatedAt).toLocaleDateString();\n  li.appendChild(date);\n\n  const rating = document.createElement('p');\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nconst fillBreadcrumb = (restaurant=self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n  li.innerHTML = restaurant.name;\n  breadcrumb.appendChild(li);\n}\n\n/**\n * Get a parameter by name from page URL.\n */\nconst getParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n\n/**\n * Catch the restaurant review form action.\n */\nconst submitReview = () => {\n  let review = {};\n  let formEl = document.getElementById('post-review-form');\n  let formElID = document.getElementById('restaurant_id');\n  formElID.value = parseInt(getParameterByName('id'));\n  formEl.appendChild(formElID);\n  for (let i = 0; i < formEl.length; ++i) {\n    let fieldName = formEl[i].name;\n    let value = formEl[i].value;\n    if (fieldName === \"\" || value === \"\") continue;\n    if (fieldName === \"restaurant_id\" || fieldName === \"rating\") {\n      value = parseInt(value);\n    }\n    review[formEl[i].name] = value;\n  }\n  formEl.reset();\n  DBHelper.sendReview(review);\n}\n\n\n\n/**\n * Init\n */\n(()=> {\n  console.log('rentaurant Init!!!')\n  fetchRestaurantFromURL()\n  .then((restaurant) => {\n    fillBreadcrumb();\n    let form = document.getElementById('post-review-form');\n    form.addEventListener('submit', function(ev) {\n      ev.preventDefault();\n      submitReview();\n    })\n    document.addEventListener(\"update_reviews_list\", ev => {\n      resetReviewsHTML()\n      DBHelper.fetchReviewByRestaurant(restaurant.id)\n      .then((reviews) => {\n        fillReviewsHTML(reviews);\n        //return resolve(self.restaurant);\n      })\n    })\n  })\n  .catch((err) => {\n    console.error('Init Error: ', err);\n  });\n})();\n"]}