{"version":3,"sources":["restaurant_info.js"],"names":["map","restaurant","window","initMap","fetchRestaurantFromURL","error","self","google","maps","Map","document","getElementById","console","center","latlng","scrollwheel","callback","id","getParameterByName","DBHelper","fetchRestaurantById","fillRestaurantHTML","arguments","length","undefined","innerHTML","name","address","picture","sourcewebp","createElement","appendChild","sourcexsmall","setAttribute","srcset","sourcesmall","imageUrlForRestaurant","sourcemedium","sourcelarge","sourcedesk","picimage","operating_hours","cuisine","fillRestaurantHoursHTML","operatingHours","fillReviewsHTML","key","row","day","time","hours","reviews","container","title","noReviews","createReviewHTML","review","ul","forEach","li","date","rating","comments","fillBreadcrumb","breadcrumb","url","location","href","replace","results","decodeURIComponent"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["let restaurant;\nvar map;\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 16,\n        center: restaurant.latlng,\n        scrollwheel: false\n      });\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n    }\n  });\n}\n\n/**\n * Get current restaurant from page URL.\n */\nconst fetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant)\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // no id found in URL\n    const error = 'No restaurant id in URL'\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant)\n    });\n  }\n}\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  const picture = document.getElementById('restaurant-img');\n  picture.className = 'restaurant-img';\n  \n  const sourcewebp = document.createElement('source');\n  sourcewebp.srcset = `/source/img/${restaurant.id}.webp`;\n  sourcewebp.setAttribute('type', 'image/webp');\n  picture.appendChild(sourcewebp);\n\n  const sourcexsmall = document.createElement('source');\n  sourcexsmall.setAttribute('media', '(min-width: 360px)');\n  sourcexsmall.srcset = DBHelper.imageUrlForRestaurant(restaurant, 'xsmall');\n  sourcexsmall.setAttribute('type', 'image/jpeg');\n  picture.appendChild(sourcexsmall);\n\n  const sourcesmall = document.createElement('source');\n  sourcesmall.setAttribute('media', '(min-width: 520px)');\n  sourcesmall.srcset = DBHelper.imageUrlForRestaurant(restaurant, 'small');\n  sourcesmall.setAttribute('type', 'image/jpeg');\n  picture.appendChild(sourcesmall);\n\n  const sourcemedium = document.createElement('source');\n  sourcemedium.setAttribute('media', '(min-width: 800px)');\n  sourcemedium.srcset = DBHelper.imageUrlForRestaurant(restaurant, 'medium');\n  sourcemedium.setAttribute('type', 'image/jpeg');\n  picture.appendChild(sourcemedium);\n\n  const sourcelarge = document.createElement('source');\n  sourcelarge.setAttribute('media', '(min-width: 1000px)');\n  sourcelarge.srcset = DBHelper.imageUrlForRestaurant(restaurant, 'large');\n  sourcelarge.setAttribute('type', 'image/jpeg');\n  picture.appendChild(sourcelarge);\n\n  const sourcedesk = document.createElement('source');\n  sourcedesk.setAttribute('media', '(min-width: 1500px)');\n  sourcedesk.srcset = `/build/img/${restaurant.id}-original.jpg`;\n  sourcedesk.setAttribute('type', 'image/jpeg');\n  picture.appendChild(sourcedesk);\n\n  const picimage = document.createElement('img');\n  picimage.className = 'restaurant-img';\n  picimage.src = DBHelper.imageUrlForRestaurant(restaurant);\n  picimage.alt = `Image of ${restaurant.name} restaurant.`;\n  picture.appendChild(picimage);\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n  // fill reviews\n  fillReviewsHTML();\n}\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h3');\n  title.innerHTML = 'Reviews';\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n}\n\n/**\n * Create review HTML and add it to the webpage.\n */\nconst createReviewHTML = (review) => {\n  const li = document.createElement('li');\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n  li.appendChild(name);\n\n  const date = document.createElement('p');\n  date.innerHTML = review.date;\n  li.appendChild(date);\n\n  const rating = document.createElement('p');\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nconst fillBreadcrumb = (restaurant=self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n  li.innerHTML = restaurant.name;\n  breadcrumb.appendChild(li);\n}\n\n/**\n * Get a parameter by name from page URL.\n */\nconst getParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n"]}