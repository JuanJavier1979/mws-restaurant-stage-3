{"version":3,"sources":["restaurant_info.js"],"names":["map","restaurant","window","initMap","self","google","maps","Map","document","getElementById","zoom","scrollwheel","fetchRestaurantFromURL","reject","id","getParameterByName","DBHelper","fetchRestaurantById","error","then","reviews","fetchReviewByRestaurant","resolve","catch","err","fillReviewsHTML","fillRestaurantHTML","arguments","length","undefined","name","picture","address","sourcewebp","createElement","className","appendChild","setAttribute","imageUrlForRestaurant","sourcexsmall","sourcesmall","sourcemedium","sourcelarge","sourcedesk","picimage","alt","cuisine","fillRestaurantHoursHTML","operatingHours","operating_hours","hours","key","row","day","innerHTML","time","container","title","noReviews","ul","review","createReviewHTML","li","date","Date","updatedAt","toLocaleDateString","rating","comments","breadcrumb","url","replace","results","exec","submitReview","decodeURIComponent","formEl","i","fieldName","value","console","parseInt","log","fillBreadcrumb","ev"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["let restaurant;\nvar map;\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n  self.map = new google.maps.Map(document.getElementById('map'), {\n    zoom: 16,\n    center: restaurant.latlng,\n    scrollwheel: false\n  });\n  DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n}\n\n/**\n * Get current restaurant from page URL.\n */\nconst fetchRestaurantFromURL = () => {\n  //console.log('fetchRestaurantFromURL()');\n  return new Promise((resolve, reject) => {\n    //console.log('self.restaurant');\n    //console.log(self.restaurant);\n    if (self.restaurant) { // restaurant already fetched!\n      //console.log('restaurant already fetched!');\n      return resolve(self.restaurant)\n    }\n    const id = getParameterByName('id');\n    //console.log('id')\n    //console.log(id)\n    if (!id) { // no id found in URL\n      const error = 'No restaurant id in URL'\n      return reject(error);\n    } else {\n      DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n        //console.log('restaurant')\n        //console.log(restaurant)\n        self.restaurant = restaurant;\n        if (!restaurant) {\n          return reject(error);\n        }\n        fillRestaurantHTML();\n        //console.log('restaurant.id '+restaurant.id);\n        DBHelper.fetchReviewByRestaurant(restaurant.id)\n        .then((reviews) => {\n          //console.log('reviews')\n          //console.log(reviews)\n          fillReviewsHTML(reviews);\n          return resolve(self.restaurant);\n        }).catch(err => {\n          return reject(err);\n        })\n        //return resolve(self.restaurant);\n      });\n    }\n  });\n}\n\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  const picture = document.getElementById('restaurant-img');\n  picture.className = 'restaurant-img';\n  \n  const sourcewebp = document.createElement('source');\n  sourcewebp.srcset = `/source/img/${restaurant.id}.webp`;\n  sourcewebp.setAttribute('type', 'image/webp');\n  picture.appendChild(sourcewebp);\n\n  const sourcexsmall = document.createElement('source');\n  sourcexsmall.setAttribute('media', '(min-width: 360px)');\n  sourcexsmall.srcset = DBHelper.imageUrlForRestaurant(restaurant, 'xsmall');\n  sourcexsmall.setAttribute('type', 'image/jpeg');\n  picture.appendChild(sourcexsmall);\n\n  const sourcesmall = document.createElement('source');\n  sourcesmall.setAttribute('media', '(min-width: 520px)');\n  sourcesmall.srcset = DBHelper.imageUrlForRestaurant(restaurant, 'small');\n  sourcesmall.setAttribute('type', 'image/jpeg');\n  picture.appendChild(sourcesmall);\n\n  const sourcemedium = document.createElement('source');\n  sourcemedium.setAttribute('media', '(min-width: 800px)');\n  sourcemedium.srcset = DBHelper.imageUrlForRestaurant(restaurant, 'medium');\n  sourcemedium.setAttribute('type', 'image/jpeg');\n  picture.appendChild(sourcemedium);\n\n  const sourcelarge = document.createElement('source');\n  sourcelarge.setAttribute('media', '(min-width: 1000px)');\n  sourcelarge.srcset = DBHelper.imageUrlForRestaurant(restaurant, 'large');\n  sourcelarge.setAttribute('type', 'image/jpeg');\n  picture.appendChild(sourcelarge);\n\n  const sourcedesk = document.createElement('source');\n  sourcedesk.setAttribute('media', '(min-width: 1500px)');\n  sourcedesk.srcset = `/build/img/${restaurant.id}-original.jpg`;\n  sourcedesk.setAttribute('type', 'image/jpeg');\n  picture.appendChild(sourcedesk);\n\n  const picimage = document.createElement('img');\n  picimage.className = 'restaurant-img';\n  picimage.src = DBHelper.imageUrlForRestaurant(restaurant);\n  picimage.alt = `Image of ${restaurant.name} restaurant.`;\n  picture.appendChild(picimage);\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n}\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  //console.log('fillReviewsHTML()');\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h3');\n  title.innerHTML = 'Reviews';\n  container.appendChild(title);\n\n  if (!reviews) {\n    //console.log('!reviews');\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n}\n\n/**\n * Create review HTML and add it to the webpage.\n */\nconst createReviewHTML = (review) => {\n  const li = document.createElement('li');\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n  li.appendChild(name);\n\n  const date = document.createElement('p');\n  date.innerHTML = new Date(review.updatedAt).toLocaleDateString();\n  li.appendChild(date);\n\n  const rating = document.createElement('p');\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nconst fillBreadcrumb = (restaurant=self.restaurant) => {\n  //console.log('fillBreadcrumb()');\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n  li.innerHTML = restaurant.name;\n  breadcrumb.appendChild(li);\n}\n\n/**\n * Get a parameter by name from page URL.\n */\nconst getParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n\n/**\n * Catch the restaurant review form action.\n */\nconst submitReview = () => {\n  let review = {};\n  let formEl = document.getElementById('post-review-form');\n  for (let i = 0; i < formEl.length; ++i) {\n    let fieldName = formEl[i].name;\n    let value = formEl[i].value;\n    if (fieldName === \"\" || value === \"\") continue;\n    if (fieldName === \"restaurant_id\" || fieldName === \"rating\") {\n      value = parseInt(value);\n    }\n    review[formEl[i].name] = value;\n  }\n  console.log('submitReview()');\n  console.log(review);\n  formEl.reset();\n  DBHelper.sendReview(review);\n}\n\n\n\n/**\n * Init\n */\n(()=> {\n  console.log('Init!!!')\n  fetchRestaurantFromURL()\n  .then((restaurant) => {\n    fillBreadcrumb();\n    let form = document.getElementById('post-review-form');\n    form.addEventListener('submit', function(ev) {\n      ev.preventDefault();\n      console.log('form.submit')\n      submitReview();\n    })\n  })\n  .catch((err) => {\n    console.error('Init Error: ', err);\n  });\n})();\n\n\n/*(()=> {\n  fetchRestaurantFromURL()\n  .then((restaurant) => {\n    DBHelper.getReviews(restaurant.id);\n    document.getElementById(\"restaurant_id\").value = restaurant.id;\n    fillBreadcrumb();\n    var form = document.getElementById('add-review-form');\n    form.addEventListener('submit', function(e) {\n      e.preventDefault();\n      submitReviewForm();\n    })\n  \n    toggle_favouriteimage(restaurant.is_favorite) ;\n    \n\n    document.addEventListener(\"reviews_updated\", e => {\n      console.log(\"Got reviews updated event\",e);\n      console.log(\"current restaurant\",self.restaurant);\n      if (e.detail.restaurant_id === self.restaurant.id) {\n        console.log(\"Updating review list\");\n        DBHelper.getReviews(self.restaurant.id).then(reviews => {\n          self.restaurant.reviews = reviews;\n          fillReviewsHTML(reviews);\n        })\n      }\n    });\n  })\n  .then(fillRestaurantHTML)\n  .catch((error) => {\n    console.error('Init Error: ', error);\n  });*/\n"]}