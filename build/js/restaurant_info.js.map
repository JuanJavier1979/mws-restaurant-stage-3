{"version":3,"sources":["restaurant_info.js"],"names":["map","restaurant","window","initMap","fetchRestaurantFromURL","error","self","google","maps","Map","document","getElementById","console","center","latlng","scrollwheel","callback","id","getParameterByName","DBHelper","fetchRestaurantById","fillRestaurantHTML","arguments","length","undefined","innerHTML","name","address","image","srcset","imageSrcSetForRestaurant","cuisine","fillRestaurantHoursHTML","operatingHours","operating_hours","fillReviewsHTML","key","row","createElement","day","time","hours","appendChild","reviews","container","title","noReviews","createReviewHTML","review","ul","forEach","li","date","rating","comments","fillBreadcrumb","breadcrumb","url","location","href","replace","results","decodeURIComponent"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["let restaurant;\nvar map;\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 16,\n        center: restaurant.latlng,\n        scrollwheel: false\n      });\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n    }\n  });\n}\n\n/**\n * Get current restaurant from page URL.\n */\nconst fetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant)\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // no id found in URL\n    const error = 'No restaurant id in URL'\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant)\n    });\n  }\n}\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  const image = document.getElementById('restaurant-img');\n  image.className = 'restaurant-img'\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\n  image.srcset = DBHelper.imageSrcSetForRestaurant(restaurant);\n  image.alt = `Image of ${restaurant.name} restaurant.`;\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n  // fill reviews\n  fillReviewsHTML();\n}\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h3');\n  title.innerHTML = 'Reviews';\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n}\n\n/**\n * Create review HTML and add it to the webpage.\n */\nconst createReviewHTML = (review) => {\n  const li = document.createElement('li');\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n  li.appendChild(name);\n\n  const date = document.createElement('p');\n  date.innerHTML = review.date;\n  li.appendChild(date);\n\n  const rating = document.createElement('p');\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nconst fillBreadcrumb = (restaurant=self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n  li.innerHTML = restaurant.name;\n  breadcrumb.appendChild(li);\n}\n\n/**\n * Get a parameter by name from page URL.\n */\nconst getParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n"]}